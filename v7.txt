import tkinter as tk
from tkinter import messagebox
import random

class Player:
    def __init__(self, player_class):
        self.player_class = player_class
        self.health = 100
        self.inventory = {"Health Potion": 2, "Damage Boost": 0}
        self.points = 0

    def reset_player(self):
        self.health = 100
        self.inventory = {"Health Potion": 2, "Damage Boost": 0}
        self.points = 0

    def display_stats(self, parent):
        stats = f"Class: {self.player_class}\nHealth: {max(0, self.health)}\nPoints: {self.points}\nInventory: {', '.join([f'{item}: {count}' for item, count in self.inventory.items()])}"
        messagebox.showinfo("Player Stats", stats, parent=parent)

class AdventureGameGUI(tk.Tk):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.title("Fantasy Adventure Game")
        self.geometry("600x400")
        self.player = Player("Adventurer")

        self.main_menu_frame = tk.Frame(self)
        self.adventure_frame = tk.Frame(self)
        self.shop_frame = tk.Frame(self)
        self.current_frame = None

        self.create_main_menu()

    def create_main_menu(self):
        self.switch_frame(self.main_menu_frame)

        label = tk.Label(self.main_menu_frame, text="Welcome to the Fantasy Adventure Game!")
        label.pack(pady=10)

        button_start = tk.Button(self.main_menu_frame, text="Start Adventure", command=self.start_adventure)
        button_start.pack(pady=10)

        button_stats = tk.Button(self.main_menu_frame, text="View Stats", command=lambda: self.player.display_stats(self))
        button_stats.pack(pady=10)

        if self.player.points >= 20:
            button_encounter_dragonlord = tk.Button(self.main_menu_frame, text="Encounter Dragonlord", command=self.encounter_dragonlord)
            button_encounter_dragonlord.pack(pady=10)

    def start_adventure(self):
        self.switch_frame(self.adventure_frame)
        label = tk.Label(self.adventure_frame, text="You find yourself on a dirt road. Ahead, the path splits into two. Choose your path:")
        label.pack(pady=10)

        choices = [
            ("Encounter Goblins", self.encounter_goblins),
            ("Explore Cave", self.explore_cave),
            ("Visit Shop", self.visit_shop),
            ("View Stats", lambda: self.player.display_stats(self)),
            ("Use Health Potion", self.use_health_potion)
        ]

        for text, command in choices:
            button = tk.Button(self.adventure_frame, text=text, command=command)
            button.pack(pady=5)

    def switch_frame(self, frame):
        if self.current_frame is not None:
            self.current_frame.destroy()
        self.current_frame = frame
        self.current_frame.pack()

    def encounter_goblins(self):
        self.generic_encounter("goblins", 20, 50, 5, 15, 1, 10)

    def encounter_dragonlord(self):
        self.generic_encounter("Dragonlord", 100, 150, 10, 20, 5, 15)

    def create_victory_screen(self):
        if self.current_frame:
            self.current_frame.destroy()
        self.victory_frame = tk.Frame(self)
        self.switch_frame(self.victory_frame)

        label = tk.Label(self.victory_frame, text="Congratulations! You defeated the Dragonlord and saved the realm!")
        label.pack(pady=10)

        button_restart = tk.Button(self.victory_frame, text="Restart Adventure", command=self.create_option_select_menu)
        button_restart.pack(pady=5)

    def create_game_over_screen(self):
        if self.current_frame:
            self.current_frame.destroy()
        self.game_over_frame = tk.Frame(self)
        self.switch_frame(self.game_over_frame)

        label = tk.Label(self.game_over_frame, text="Game Over! You were defeated. Better luck next time!")
        label.pack(pady=10)

        button_restart = tk.Button(self.game_over_frame, text="Restart Adventure", command=self.restart_adventure)
        button_restart.pack(pady=5)

    def restart_adventure(self):
        self.player.reset_player()
        self.create_option_select_menu()



    def generic_encounter(self, enemy, min_hp, max_hp, min_dmg, max_dmg, enemy_min_dmg, enemy_max_dmg):
        enemy_health = random.randint(min_hp, max_hp)
        result = messagebox.askyesno(
            "Encounter", f"You encounter {enemy} with {enemy_health} health. Do you wish to fight?", parent=self
        )
        if not result:
            messagebox.showinfo("Retreat", "You chose to avoid the encounter.", parent=self)
            return

        while enemy_health > 0 and self.player.health > 0:
            attack_damage = random.randint(min_dmg, max_dmg)
            enemy_attack = random.randint(enemy_min_dmg, enemy_max_dmg)
            enemy_health -= attack_damage
            self.player.health -= enemy_attack
            if self.player.health <= 0 or enemy_health <= 0:
                break

            continue_fight = messagebox.askyesno(
                "Battle", f"You deal {attack_damage} damage. Enemy health: {enemy_health}\nEnemy attacks! You receive {enemy_attack} damage. Continue fighting?",
                parent=self
            )
            if not continue_fight:
                break

        if enemy_health <= 0:
            if enemy == "Dragonlord":
                self.create_victory_screen()
            else:
                messagebox.showinfo("Victory", f"You defeated the {enemy}. You find a Health Potion.", parent=self)
                self.player.inventory["Health Potion"] += 1
                self.player.points += 10
        elif self.player.health <= 0:
            self.create_game_over_screen()



    def explore_cave(self):
        if self.current_frame:
            self.current_frame.destroy()
        self.explore_cave_frame = tk.Frame(self)
        self.switch_frame(self.explore_cave_frame)

        label = tk.Label(self.explore_cave_frame, text="You enter the dark cave and find a treasure chest. Do you want to open it?")
        label.pack(pady=10)

        button_open_chest = tk.Button(self.explore_cave_frame, text="Yes", command=self.handle_chest_result)
        button_open_chest.pack(pady=5)

        button_leave_cave = tk.Button(self.explore_cave_frame, text="No", command=self.create_option_select_menu)
        button_leave_cave.pack(pady=5)

    def handle_chest_result(self):
        treasure = random.choice(["Gold Coins", "Magic Scroll", "Monster Trap", "Friendly NPC"])
        if treasure == "Gold Coins":
            messagebox.showinfo("Treasure", "You find Gold Coins!", parent=self)
            self.player.points += 20
        elif treasure == "Magic Scroll":
            messagebox.showinfo("Treasure", "You find a Magic Scroll!", parent=self)
            self.player.points += 30
        elif treasure == "Monster Trap":
            messagebox.showinfo("Treasure", "Oops! The chest contained a monster trap. You lose health.", parent=self)
            self.player.health -= 20
        elif treasure == "Friendly NPC":
            messagebox.showinfo("Treasure", "You meet a friendly NPC who gives you a health potion and some coins.", parent=self)
            self.player.inventory["Health Potion"] += 1
            self.player.points += 15

        self.create_option_select_menu()


    def open_treasure_chest(self):
        treasure = random.choice(["Gold Coins", "Magic Scroll", "Monster Trap", "Friendly NPC"])
        messagebox.showinfo("Treasure Chest", f"You found something in the chest!\n{treasure}", parent=self)
        if treasure == "Gold Coins":
            self.player.points += 20
        elif treasure == "Magic Scroll":
            self.player.points += 30
        elif treasure == "Monster Trap":
            self.player.health -= 20
        elif treasure == "Friendly NPC":
            self.player.inventory["Health Potion"] += 1
            self.player.points += 15

        self.create_main_menu()

    def visit_shop(self):
        if self.current_frame:
            self.current_frame.destroy()
        self.shop_frame = tk.Frame(self)
        self.switch_frame(self.shop_frame)

        label = tk.Label(self.shop_frame, text="Welcome to the Shop!")
        label.pack(pady=10)

        button_buy_health_potion = tk.Button(self.shop_frame, text="Buy Health Potion (30 points)", command=self.buy_health_potion)
        button_buy_health_potion.pack(pady=5)

        button_buy_damage_boost = tk.Button(self.shop_frame, text="Buy Damage Boost (50 points)", command=self.buy_damage_boost)
        button_buy_damage_boost.pack(pady=5)

        button_return = tk.Button(self.shop_frame, text="Return to Main Menu", command=self.return_to_main_menu_from_shop)
        button_return.pack(pady=10)

    def return_to_main_menu_from_shop(self):
        if self.current_frame:
            self.current_frame.destroy()
        self.create_option_select_menu()

    def return_to_main_menu_from_shop(self):
        if self.current_frame:
            self.current_frame.destroy()
        self.create_option_select_menu()


    def create_option_select_menu(self):
        if self.current_frame:
            self.current_frame.destroy()
        self.option_select_frame = tk.Frame(self)
        self.switch_frame(self.option_select_frame)

        label = tk.Label(self.option_select_frame, text="Choose your path:")
        label.pack(pady=10)

        choices = [
            ("Encounter Goblins", self.encounter_goblins),
            ("Explore Cave", self.explore_cave),
            ("Visit Shop", self.visit_shop),
            ("View Stats", lambda: self.player.display_stats(self)),
            ("Use Health Potion", self.use_health_potion)
        ]

        for text, command in choices:
            button = tk.Button(self.option_select_frame, text=text, command=command)
            button.pack(pady=5)

        if self.player.points >= 20:
            button_encounter_dragonlord = tk.Button(
                self.option_select_frame, text="Encounter Dragonlord", command=self.encounter_dragonlord
            )
            button_encounter_dragonlord.pack(pady=10)


    def buy_health_potion(self):
        if self.player.points >= 30:
            self.player.inventory["Health Potion"] += 1
            self.player.points -= 30
            messagebox.showinfo("Purchase", "You bought a Health Potion.", parent=self)
        else:
            messagebox.showinfo("Purchase", "Not enough points to buy a Health Potion.", parent=self)

    def buy_damage_boost(self):
        if self.player.points >= 50:
            self.player.inventory["Damage Boost"] += 1
            self.player.points -= 50
            messagebox.showinfo("Purchase", "You bought a Damage Boost.", parent=self)
        else:
            messagebox.showinfo("Purchase", "Not enough points to buy a Damage Boost.", parent=self)

    def use_health_potion(self):
        if self.player.inventory["Health Potion"] > 0:
            heal_amount = random.randint(15, 30)
            self.player.health = min(100, self.player.health + heal_amount)
            self.player.inventory["Health Potion"] -= 1
            messagebox.showinfo("Heal", f"You use a health potion and heal for {heal_amount} HP.\nYour health: {self.player.health}", parent=self)
        else:
            messagebox.showinfo("Heal", "You don't have any health potions left!", parent=self)

if __name__ == "__main__":
    app = AdventureGameGUI()
    app.mainloop()
